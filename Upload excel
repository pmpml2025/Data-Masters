import os
import pandas as pd
from flask import Flask, request, send_file, render_template, jsonify
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text

app = Flask(__name__)

# Upload folder configuration
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER  

# Updated database connection to use the uploaded file
db_path = os.path.join(os.getcwd(), "database/transit_database_new.db")
app.config["SQLALCHEMY_DATABASE_URI"] = f"sqlite:///{db_path}"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

# Allowed file extensions
ALLOWED_EXTENSIONS = {'xls', 'xlsx'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_columns(table_name):
    query = text(f"PRAGMA table_info({table_name});")
    with db.engine.connect() as connection:
        result = connection.execute(query).fetchall()
    return [row[1] for row in result]

def get_table_names():
    query = text("SELECT name FROM sqlite_master WHERE type='table';")
    with db.engine.connect() as connection:
        result = connection.execute(query).fetchall()
    return [row[0] for row in result]

def get_max_id(table_name, id_column):
    query = text(f"SELECT MAX({id_column}) FROM {table_name}")
    with db.engine.connect() as connection:
        result = connection.execute(query).fetchone()
    return (result[0] or 0) + 1

def validate_foreign_keys(table_name, df):
    foreign_keys = {
        'Route_Master': [('brt_id', 'BRT_Master'), ('depot_id', 'Depot_Master')],
    }
    
    if table_name in foreign_keys:
        for fk_column, ref_table in foreign_keys[table_name]:
            existing_ids = {row[0] for row in db.session.execute(text(f"SELECT DISTINCT {fk_column} FROM {ref_table}"))}
            df = df[df[fk_column].isin(existing_ids)]
    
    return df

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/get_tables', methods=['GET'])
def get_tables():
    return jsonify(get_table_names())

@app.route('/show_data/<table_name>', methods=['GET'])
def show_data(table_name):
    if table_name == "Choose a table":
        return jsonify({"error": "Invalid table name selected"}), 400
    
    query = text(f"SELECT * FROM {table_name} LIMIT 100")
    with db.engine.connect() as connection:
        result = connection.execute(query)
        data = result.fetchall()
        columns = result.keys()
    
    return render_template("table.html", columns=columns, data=data)


@app.route('/upload/<table_name>', methods=['POST'])
def upload_file(table_name):
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file and allowed_file(file.filename):
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        df = pd.read_excel(file_path)
        columns = get_columns(table_name)
        df = df[columns]  # Keep only valid columns
        
        # Assign missing IDs
        id_column = columns[0]  # Assuming first column is the primary key
        if id_column in df.columns and df[id_column].isnull().any():
            df[id_column] = range(get_max_id(table_name, id_column), get_max_id(table_name, id_column) + len(df))
        
        # Validate Foreign Keys
        df = validate_foreign_keys(table_name, df)
        
        # Debugging: Print data before inserting
        print("Inserting data into:", table_name)
        print(df.head())
        
        try:
            df.to_sql(table_name, con=db.engine, if_exists='append', index=False)
            print("Data inserted successfully.")
            return jsonify({"success": f"File uploaded. Inserted {len(df)} rows."})
        except Exception as e:
            print("Error inserting data:", str(e))
            return jsonify({"error": str(e)}), 500
    return jsonify({"error": "Invalid file format"}), 400


# Route to generate and download a sample Excel file for all tables
@app.route('/download_sample/<table_name>')
def download_sample(table_name):
    columns = get_columns(table_name)
    if not columns:
        return f"Error: {table_name} table not found or has no columns."
    
    sample_data = {col: ["SampleData"] for col in columns}
    df = pd.DataFrame(sample_data)
    file_path = os.path.join(app.config["UPLOAD_FOLDER"], f"sample_{table_name}.xlsx")
    df.to_excel(file_path, index=False)
    return send_file(file_path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)